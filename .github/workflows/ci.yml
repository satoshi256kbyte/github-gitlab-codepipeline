name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]


env:
  AWS_REGION: ap-northeast-1
  SERVICE_NAME: cicd-comparison
  STAGE_NAME: production
  CICD_TOOL: github
  PYTHON_VERSION: "3.13"

jobs:
  # キャッシュ作成ジョブ
  prepare:
    name: Prepare
    runs-on: ubuntu-latest
    environment: production
    permissions:
        id-token: write
        contents: read
        security-events: write
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate cache key
        id: cache-key
        run: |
          CACHE_KEY="cache-$(sha256sum .tool-versions uv.lock | sha256sum | cut -d' ' -f1)"
          echo "key=$CACHE_KEY" >> $GITHUB_OUTPUT
          echo "Cache key: $CACHE_KEY"

      - name: Setup asdf
        uses: asdf-vm/actions/setup@v3

      - name: Install tools via asdf
        run: |
          asdf plugin add python
          asdf plugin add nodejs
          asdf install

      - name: Setup uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.cache/uv
            ~/.cargo
            ~/.asdf
            ~/.local/bin
            node_modules
          key: ${{ steps.cache-key.outputs.key }}

      - name: Install Python dependencies
        run: |
          uv sync --dev

  # 静的解析ジョブ
  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: prepare
    environment: production
    permissions:
        id-token: write
        contents: read
        security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.cache/uv
            ~/.cargo
            ~/.asdf
            ~/.local/bin
            node_modules
          key: ${{ needs.prepare.outputs.cache-key }}

      - name: Setup asdf
        uses: asdf-vm/actions/setup@v3

      - name: Install tools via asdf
        run: |
          asdf plugin add python
          asdf plugin add nodejs
          asdf install

      - name: Setup uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Run linting
        run: |
          uv run ruff check .
          uv run ruff format --check .

  # ユニットテストジョブ
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: prepare
    environment: production
    permissions:
        id-token: write
        contents: read
        security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.cache/uv
            ~/.cargo
            ~/.asdf
            ~/.local/bin
            node_modules
          key: ${{ needs.prepare.outputs.cache-key }}

      - name: Setup asdf
        uses: asdf-vm/actions/setup@v3

      - name: Install tools via asdf
        run: |
          asdf plugin add python
          asdf plugin add nodejs
          asdf install

      - name: Setup uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Run tests
        run: |
          uv run pytest modules/api/tests/ -v --cov=modules/api --cov-report=xml

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # SCAチェックジョブ（Dependabot + CodeGuru Security）
  sca:
    name: SCA (Dependabot + CodeGuru)
    runs-on: ubuntu-latest
    needs: prepare
    environment: production
    permissions:
        id-token: write
        contents: read
        security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.cache/uv
            ~/.cargo
            ~/.asdf
            ~/.local/bin
            node_modules
          key: ${{ needs.prepare.outputs.cache-key }}

      - name: Setup asdf
        uses: asdf-vm/actions/setup@v3

      - name: Install tools via asdf
        run: |
          asdf plugin add python
          asdf plugin add nodejs
          asdf install

      - name: Setup uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Export requirements for CodeGuru Security
        run: |
          uv export --all-packages --no-dev --frozen --no-editable -o requirements.txt --no-emit-workspace --no-hashes --no-header

      - name: Check for Dependabot alerts
        run: |
          echo "Dependabot automatically scans for vulnerabilities in dependencies"
          echo "Check the Security tab in GitHub repository for Dependabot alerts"
          echo "This step represents the Dependabot SCA scanning process"

      - name: Configure AWS credentials via OIDC
        # GitHub OIDCを使ってIAMロールを引き受ける
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_GITHUB_ACTIONS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Run CodeGuru Security SCA scan
        run: |
          SCAN_NAME="${{ env.CICD_TOOL }}-${{ env.STAGE_NAME }}-sca-$(date +%s)"
          echo "Running CodeGuru Security SCA scan: $SCAN_NAME"
          bash ./cicd/scripts/run_codeguru_security.sh $SCAN_NAME . ${{ env.AWS_REGION }}

          # 脆弱性チェック
          if [ -f "$SCAN_NAME.json" ]; then
            CRITICAL_COUNT=$(jq '[.findings[] | select(.severity == "Critical")] | length' $SCAN_NAME.json)
            HIGH_COUNT=$(jq '[.findings[] | select(.severity == "High")] | length' $SCAN_NAME.json)
            
            echo "SCA - Critical vulnerabilities: $CRITICAL_COUNT"
            echo "SCA - High vulnerabilities: $HIGH_COUNT"
            
            if [ "$CRITICAL_COUNT" -gt 0 ]; then
              echo "ERROR: Found $CRITICAL_COUNT critical vulnerabilities in SCA scan"
              exit 1
            fi
          fi

  # SASTチェックジョブ（CodeQL + CodeGuru Security）
  sast:
    name: SAST (CodeQL + CodeGuru)
    runs-on: ubuntu-latest
    needs: prepare
    environment: production
    permissions:
        id-token: write
        contents: read
        security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.cache/uv
            ~/.cargo
            ~/.asdf
            ~/.local/bin
            node_modules
          key: ${{ needs.prepare.outputs.cache-key }}

      - name: Setup asdf
        uses: asdf-vm/actions/setup@v3

      - name: Install tools via asdf
        run: |
          asdf plugin add python
          asdf plugin add nodejs
          asdf install

      - name: Setup uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Configure AWS credentials via OIDC
        # GitHub OIDCを使ってIAMロールを引き受ける
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_GITHUB_ACTIONS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Run CodeGuru Security SAST scan
        run: |
          SCAN_NAME="${{ env.CICD_TOOL }}-${{ env.STAGE_NAME }}-sast-$(date +%s)"
          echo "Running CodeGuru Security SAST scan: $SCAN_NAME"
          zip -r /tmp/source-code.zip . -x "*.git*" "node_modules/*" "*.pyc" "__pycache__/*" ".venv/*"
          bash ./cicd/scripts/run_codeguru_security.sh $SCAN_NAME /tmp/source-code.zip ${{ env.AWS_REGION }}

          # 脆弱性チェック
          if [ -f "$SCAN_NAME.json" ]; then
            CRITICAL_COUNT=$(jq '[.findings[] | select(.severity == "Critical")] | length' $SCAN_NAME.json)
            HIGH_COUNT=$(jq '[.findings[] | select(.severity == "High")] | length' $SCAN_NAME.json)

            echo "SAST - Critical vulnerabilities: $CRITICAL_COUNT"
            echo "SAST - High vulnerabilities: $HIGH_COUNT"

            if [ "$CRITICAL_COUNT" -gt 0 ]; then
              echo "ERROR: Found $CRITICAL_COUNT critical vulnerabilities in SAST scan"
              exit 1
            fi
          fi

  # AWS Lambdaデプロイジョブ
  deploy_lambda:
    name: Deploy to AWS Lambda
    runs-on: ubuntu-latest
    needs: [lint, test, sca, sast]
    environment: production
    permissions:
        id-token: write
        contents: read
        security-events: write
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup asdf
        uses: asdf-vm/actions/setup@v3

      - name: Install tools via asdf
        run: |
          asdf plugin add python
          asdf plugin add nodejs
          asdf install

      - name: Setup uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Configure AWS credentials via OIDC
        # GitHub OIDCを使ってIAMロールを引き受ける
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_GITHUB_ACTIONS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install SAM CLI
        uses: aws-actions/setup-sam@v2

      - name: Build SAM application
        run: |
          sam build --template-file template-github.yaml --use-container

      - name: Deploy to Lambda
        run: |
          sam deploy --template-file template-github.yaml \
            --no-confirm-changeset --no-fail-on-empty-changeset \
            --stack-name ${{ env.CICD_TOOL }}-${{ env.STAGE_NAME }}-lambda \
            --capabilities CAPABILITY_IAM \
            --region ${{ env.AWS_REGION }} \
            --parameter-overrides \
              Environment=${{ env.STAGE_NAME }} \
              ServiceName=${{ env.SERVICE_NAME }} \
              CicdTool=${{ env.CICD_TOOL }}
          API_URL=$(create_api_gateway_for_lambda \
            "${{ env.CICD_TOOL }}-${{ env.STAGE_NAME }}-api" \
            "${{ env.CICD_TOOL }}-${{ env.STAGE_NAME }}-lambda-api")

          echo "✅ Lambda deployed to LocalStack: $API_URL"

  # EC2 CodeDeployデプロイジョブ
  deploy_ec2:
    name: Deploy to EC2 (Blue/Green)
    runs-on: ubuntu-latest
    needs: [lint, test, sca, sast]
    environment: production
    permissions:
        id-token: write
        contents: read
        security-events: write
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        # GitHub OIDCを使ってIAMロールを引き受ける
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_GITHUB_ACTIONS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create deployment package
        run: |
          # GitHub Actions専用のappspec.ymlを使用
          cp appspec-ec2-github.yml appspec.yml
          zip -r deployment-package.zip . \
            -x "*.git*" "node_modules/*" "*.pyc" "__pycache__/*" ".venv/*" \
            "cdk.out/*" "*.zip" "appspec-*"

      - name: Upload to S3
        run: |
          BUCKET_NAME="${{ env.CICD_TOOL }}-${{ env.STAGE_NAME }}-deployments"
          S3_KEY="ec2-deployments/${{ github.sha }}/deployment-package.zip"

          aws s3 cp deployment-package.zip s3://$BUCKET_NAME/$S3_KEY
          echo "S3_LOCATION=s3://$BUCKET_NAME/$S3_KEY" >> $GITHUB_ENV

      - name: Deploy to EC2 using CodeDeploy
        run: |
          DEPLOYMENT_ID=$(aws deploy create-deployment \
            --application-name "${{ env.CICD_TOOL }}-${{ env.STAGE_NAME }}-ec2-app" \
            --deployment-group-name "${{ env.CICD_TOOL }}-${{ env.STAGE_NAME }}-ec2-dg" \
            --deployment-config-name "CodeDeployDefault.EC2AllAtOnceBlueGreen" \
            --s3-location bucket="${{ env.CICD_TOOL }}-${{ env.STAGE_NAME }}-deployments",key="ec2-deployments/${{ github.sha }}/deployment-package.zip",bundleType=zip \
            --region ${{ env.AWS_REGION }} \
            --query "deploymentId" \
            --output text)

          echo "Deployment ID: $DEPLOYMENT_ID"

          # デプロイメント完了まで待機
          TIMEOUT=1800
          INTERVAL=30
          ELAPSED=0

          while true; do
            STATUS=$(aws deploy get-deployment \
              --deployment-id "$DEPLOYMENT_ID" \
              --region ${{ env.AWS_REGION }} \
              --query "deploymentInfo.status" \
              --output text)
            
            echo "[$ELAPSED sec] Deployment status: $STATUS"
            
            if [[ "$STATUS" == "Succeeded" ]]; then
              echo "Deployment succeeded."
              break
            fi
            
            if [[ "$STATUS" == "Failed" || "$STATUS" == "Stopped" ]]; then
              echo "Deployment failed or was stopped."
              exit 1
            fi
            
            if [[ $ELAPSED -ge $TIMEOUT ]]; then
              echo "Deployment timeout after $TIMEOUT seconds."
              exit 1
            fi
            
            sleep $INTERVAL
            ELAPSED=$((ELAPSED + INTERVAL))
          done
