name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  AWS_REGION: ap-northeast-1
  SERVICE_NAME: cicd-comparison
  STAGE_NAME: local
  CICD_TOOL: github
  PYTHON_VERSION: "3.13"

jobs:
  # キャッシュ作成ジョブ
  prepare:
    name: Prepare
    runs-on: ubuntu-latest
    environment: production
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Generate cache key
        id: cache-key
        run: |
          CACHE_KEY="cache-$(sha256sum .tool-versions uv.lock | sha256sum | cut -d' ' -f1)"
          echo "key=$CACHE_KEY" >> $GITHUB_OUTPUT
          echo "Cache key: $CACHE_KEY"

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.asdf
            ~/.cache/pip
            ~/.cache/uv
            ~/.cargo
            ~/.local/bin
          key: ${{ steps.cache-key.outputs.key }}
    
      - name: Setup asdf
        uses: asdf-vm/actions/setup@v4

      - name: Install tools via asdf
        run: |
          asdf plugin add python
          asdf install
          ls -la

      - name: Setup uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install Python dependencies
        run: |
          uv sync --dev

  # 静的解析ジョブ
  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: prepare
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.asdf
            ~/.cache/pip
            ~/.cache/uv
            ~/.cargo
            ~/.local/bin
          key: ${{ needs.prepare.outputs.cache-key }}

      - name: Run linting
        run: |
          uv run ruff check .
          uv run ruff format --check .

  # ユニットテストジョブ
  unittest:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: prepare
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.asdf
            ~/.cache/pip
            ~/.cache/uv
            ~/.cargo
            ~/.local/bin
          key: ${{ needs.prepare.outputs.cache-key }}

      - name: Run tests
        run: |
          uv run pytest modules/api/tests/ -v --cov=modules/api --cov-report=xml

  # SCAチェックジョブ（Trivy)
  sca_trivy:
    name: SCA (Trivy)
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Run Trivy vulnerability scanner in fs mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          trivy-config: trivy-config.yaml

  # SASTチェックジョブ（Semgrep）
  sast_semgrep:
    name: SAST (Semgrep)
    runs-on: ubuntu-latest
    needs: prepare
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.asdf
            ~/.cache/pip
            ~/.cache/uv
            ~/.cargo
            ~/.local/bin
          key: ${{ needs.prepare.outputs.cache-key }}

      - name: Run Semgrep SAST scan
        run: |
           uv run semgrep scan --config=auto --error modules/

# AWS Lambdaデプロイジョブ
  deploy_lambda:
    name: Deploy to AWS Lambda
    runs-on: ubuntu-latest
    needs: [prepare, lint, unittest, sca_trivy, sast_semgrep]
    environment: production
    permissions:
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.asdf
            ~/.cache/pip
            ~/.cache/uv
            ~/.cargo
            ~/.local/bin
          key: ${{ needs.prepare.outputs.cache-key }}

      - name: Setup asdf
        uses: asdf-vm/actions/setup@v4

      - name: Install tools via asdf
        run: |
          asdf plugin add python
          asdf install

      - name: Setup uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Configure AWS credentials via OIDC
        # GitHub OIDCを使ってIAMロールを引き受ける
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_GITHUB_ACTIONS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install SAM CLI
        uses: aws-actions/setup-sam@v2

      - name: Build SAM application
        run: |
          sam build --template-file template-github.yaml

      - name: Deploy to Lambda
        run: |
          sam deploy --template-file template-github.yaml \
            --no-confirm-changeset --no-fail-on-empty-changeset \
            --config-env github

  # EC2 CodeDeployデプロイジョブ
  deploy_ec2:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: [prepare, lint, unittest, sca_trivy, sast_semgrep]
    environment: production
    permissions:
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.asdf
            ~/.cache/pip
            ~/.cache/uv
            ~/.cargo
            ~/.local/bin
          key: ${{ needs.prepare.outputs.cache-key }}

      - name: Configure AWS credentials via OIDC
        # GitHub OIDCを使ってIAMロールを引き受ける
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_GITHUB_ACTIONS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create deployment package
        run: |
          zip -r deployment-package.zip . \
            -x "*.git*" "*.pyc" "__pycache__/*" ".venv/*" ".asdf/*" \
            "cdk.out/*" "*.zip"

      - name: Upload to S3
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          BUCKET_NAME="comparison-${{ env.STAGE_NAME }}-${ACCOUNT_ID}-artifact-bucket"
          S3_KEY="ec2-deployments/${{ github.sha }}/deployment-package.zip"

          aws s3 cp deployment-package.zip s3://$BUCKET_NAME/$S3_KEY
          echo "BUCKET_NAME=$BUCKET_NAME" >> $GITHUB_ENV
          echo "S3_LOCATION=s3://$BUCKET_NAME/$S3_KEY" >> $GITHUB_ENV

      - name: Deploy to EC2 using CodeDeploy
        run: |
          # 既存のアクティブなデプロイメントを確認・停止
          echo "Checking for active deployments..."
          ACTIVE_DEPLOYMENTS=$(aws deploy list-deployments \
            --application-name "${{ env.CICD_TOOL }}-${{ env.STAGE_NAME }}-codedeploy-application" \
            --deployment-group-name "${{ env.CICD_TOOL }}-${{ env.STAGE_NAME }}-codedeploy-deployment-group" \
            --include-only-statuses "Created" "Queued" "InProgress" \
            --query "deployments" \
            --output text \
            --region ${{ env.AWS_REGION }})

          if [ ! -z "$ACTIVE_DEPLOYMENTS" ] && [ "$ACTIVE_DEPLOYMENTS" != "None" ]; then
            echo "Found active deployment(s): $ACTIVE_DEPLOYMENTS"
            for DEPLOYMENT_ID in $ACTIVE_DEPLOYMENTS; do
              echo "Stopping deployment: $DEPLOYMENT_ID"
              aws deploy stop-deployment \
                --deployment-id $DEPLOYMENT_ID \
                --auto-rollback-enabled \
                --region ${{ env.AWS_REGION }} || true
            done
            echo "Waiting for deployments to stop..."
            sleep 30
          fi

          # 新しいデプロイメントを作成
          DEPLOYMENT_ID=$(aws deploy create-deployment \
            --application-name "${{ env.CICD_TOOL }}-${{ env.STAGE_NAME }}-codedeploy-application" \
            --deployment-group-name "${{ env.CICD_TOOL }}-${{ env.STAGE_NAME }}-codedeploy-deployment-group" \
            --deployment-config-name "CodeDeployDefault.AllAtOnce" \
            --s3-location bucket="${{ env.BUCKET_NAME }}",key="ec2-deployments/${{ github.sha }}/deployment-package.zip",bundleType=zip \
            --region ${{ env.AWS_REGION }} \
            --query "deploymentId" \
            --output text)

          echo "Deployment ID: $DEPLOYMENT_ID"

          # デプロイメント完了まで待機
          TIMEOUT=1800
          INTERVAL=30
          ELAPSED=0

          while true; do
            STATUS=$(aws deploy get-deployment \
              --deployment-id "$DEPLOYMENT_ID" \
              --region ${{ env.AWS_REGION }} \
              --query "deploymentInfo.status" \
              --output text)
            
            echo "[$ELAPSED sec] Deployment status: $STATUS"
            
            if [[ "$STATUS" == "Succeeded" ]]; then
              echo "Deployment succeeded."
              break
            fi
            
            if [[ "$STATUS" == "Failed" || "$STATUS" == "Stopped" ]]; then
              echo "Deployment failed or was stopped."
              exit 1
            fi
            
            if [[ $ELAPSED -ge $TIMEOUT ]]; then
              echo "Deployment timeout after $TIMEOUT seconds."
              exit 1
            fi
            
            sleep $INTERVAL
            ELAPSED=$((ELAPSED + INTERVAL))
          done
