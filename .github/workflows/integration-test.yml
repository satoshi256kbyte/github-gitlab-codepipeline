name: Integration Tests

on:
  workflow_run:
    workflows: ["CI/CD Pipeline"]
    types:
      - completed
    branches: [main]

env:
  AWS_REGION: us-east-1
  SERVICE_NAME: cicd-comparison
  STAGE_NAME: local

jobs:
  integration-test:
    name: Run Integration Tests
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup asdf
        uses: asdf-vm/actions/setup@v3

      - name: Install tools via asdf
        run: asdf install

      - name: Setup uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: uv sync --dev

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: GitHubActions-IntegrationTest
          aws-region: ${{ env.AWS_REGION }}

      - name: Test Lambda deployment
        run: |
          echo "Testing Lambda deployment..."
          LAMBDA_URL=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.SERVICE_NAME }}-${{ env.STAGE_NAME }}-lambda \
            --region ${{ env.AWS_REGION }} \
            --query "Stacks[0].Outputs[?OutputKey=='ApiUrl'].OutputValue" \
            --output text)

          echo "Lambda API URL: $LAMBDA_URL"

          # ヘルスチェック
          curl -f "$LAMBDA_URL/health" || exit 1
          echo "Lambda health check passed"

          # バージョン情報
          curl -f "$LAMBDA_URL/version" || exit 1
          echo "Lambda version check passed"

      - name: Test ECS deployment
        run: |
          echo "Testing ECS deployment..."
          ECS_URL=$(aws elbv2 describe-load-balancers \
            --names ${{ env.SERVICE_NAME }}-${{ env.STAGE_NAME }}-ecs-alb \
            --region ${{ env.AWS_REGION }} \
            --query "LoadBalancers[0].DNSName" \
            --output text)

          echo "ECS ALB URL: http://$ECS_URL"

          # ヘルスチェック（リトライ付き）
          for i in {1..10}; do
            if curl -f "http://$ECS_URL/health"; then
              echo "ECS health check passed"
              break
            fi
            echo "Retry $i/10..."
            sleep 30
          done

          # バージョン情報
          curl -f "http://$ECS_URL/version" || exit 1
          echo "ECS version check passed"

      - name: Test EC2 deployment
        run: |
          echo "Testing EC2 deployment..."
          EC2_URL=$(aws elbv2 describe-load-balancers \
            --names ${{ env.SERVICE_NAME }}-${{ env.STAGE_NAME }}-ec2-alb \
            --region ${{ env.AWS_REGION }} \
            --query "LoadBalancers[0].DNSName" \
            --output text)

          echo "EC2 ALB URL: http://$EC2_URL"

          # ヘルスチェック（リトライ付き）
          for i in {1..10}; do
            if curl -f "http://$EC2_URL/health"; then
              echo "EC2 health check passed"
              break
            fi
            echo "Retry $i/10..."
            sleep 30
          done

          # バージョン情報
          curl -f "http://$EC2_URL/version" || exit 1
          echo "EC2 version check passed"

      - name: Run comprehensive API tests
        run: |
          echo "Running comprehensive API tests..."
          uv run pytest modules/api/tests/test_deployment_integration.py -v
