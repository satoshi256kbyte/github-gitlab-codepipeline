# CI/CDツール比較用Makefile
# 各CI/CDツールのパフォーマンス測定とメトリクス収集を実行

.PHONY: help test-endpoints test-performance collect-metrics compare-all clean

# デフォルトターゲット
help:
	@echo "CI/CDツール比較用コマンド:"
	@echo "  test-endpoints      - 各CI/CDツール専用エンドポイントのアクセステスト実行"
	@echo "  test-performance    - パフォーマンス比較テスト実行"
	@echo "  test-failures       - パイプライン失敗条件テスト実行"
	@echo "  collect-metrics     - CI/CDメトリクス収集実行"
	@echo "  compare-all         - 全ての比較テストを実行"
	@echo "  performance-report  - パフォーマンス比較レポート生成"
	@echo "  clean              - 生成されたレポートファイルを削除"

# 各CI/CDツール専用エンドポイントのアクセステスト
test-endpoints:
	@echo "=== CI/CDツール専用エンドポイントアクセステスト実行 ==="
	python -m pytest modules/api/tests/test_cicd_tool_comparison.py::TestCICDToolEndpointComparison -v --tb=short

# パフォーマンス比較テスト
test-performance:
	@echo "=== CI/CDツールパフォーマンス比較テスト実行 ==="
	python -m pytest modules/api/tests/test_cicd_tool_comparison.py::TestCICDToolPerformanceComparison -v --tb=short

# パイプライン失敗条件テスト
test-failures:
	@echo "=== パイプライン失敗条件テスト実行 ==="
	python -m pytest modules/api/tests/test_pipeline_failure_conditions.py -v --tb=short

# CI/CDメトリクス収集
collect-metrics:
	@echo "=== CI/CDメトリクス収集実行 ==="
	@mkdir -p reports
	python scripts/collect-cicd-metrics.py \
		--tools github gitlab codepipeline \
		--days 7 \
		--include-deployments \
		--github-repo "${GITHUB_REPO}" \
		--codepipeline-name "${CODEPIPELINE_NAME}"

# パフォーマンス比較レポート生成
performance-report:
	@echo "=== パフォーマンス比較レポート生成 ==="
	@mkdir -p reports
	python scripts/cicd-performance-comparison.py \
		--tools github gitlab codepipeline \
		--measure-deployment

# 全ての比較テストを実行
compare-all: test-endpoints test-performance test-failures collect-metrics performance-report
	@echo "=== 全てのCI/CDツール比較テストが完了しました ==="
	@echo "生成されたレポート:"
	@ls -la reports/

# GitHub Actions専用テスト
test-github:
	@echo "=== GitHub Actions専用テスト実行 ==="
	python -m pytest modules/api/tests/test_cicd_tool_comparison.py -k "github" -v --tb=short

# GitLab CI/CD専用テスト
test-gitlab:
	@echo "=== GitLab CI/CD専用テスト実行 ==="
	python -m pytest modules/api/tests/test_cicd_tool_comparison.py -k "gitlab" -v --tb=short

# CodePipeline専用テスト
test-codepipeline:
	@echo "=== CodePipeline専用テスト実行 ==="
	python -m pytest modules/api/tests/test_cicd_tool_comparison.py -k "codepipeline" -v --tb=short

# 失敗条件別テスト
test-lint-failures:
	@echo "=== 静的解析失敗条件テスト実行 ==="
	python -m pytest modules/api/tests/test_pipeline_failure_conditions.py -k "lint" -v --tb=short

test-unit-failures:
	@echo "=== ユニットテスト失敗条件テスト実行 ==="
	python -m pytest modules/api/tests/test_pipeline_failure_conditions.py -k "test" -v --tb=short

test-sca-failures:
	@echo "=== SCA失敗条件テスト実行 ==="
	python -m pytest modules/api/tests/test_pipeline_failure_conditions.py -k "sca" -v --tb=short

test-sast-failures:
	@echo "=== SAST失敗条件テスト実行 ==="
	python -m pytest modules/api/tests/test_pipeline_failure_conditions.py -k "sast" -v --tb=short

# レスポンス時間測定
measure-response-times:
	@echo "=== エンドポイントレスポンス時間測定 ==="
	python -m pytest modules/api/tests/test_cicd_tool_comparison.py::TestCICDToolPerformanceComparison::test_endpoint_response_time -v -s

# 失敗検出速度測定
measure-failure-detection:
	@echo "=== 失敗検出速度測定 ==="
	python -m pytest modules/api/tests/test_pipeline_failure_conditions.py::TestPipelinePerformanceUnderFailure::test_failure_detection_speed -v -s

# 環境変数チェック
check-env:
	@echo "=== 環境変数チェック ==="
	@echo "GITHUB_TOKEN: $${GITHUB_TOKEN:+設定済み}"
	@echo "GITHUB_REPO: $${GITHUB_REPO:-未設定}"
	@echo "GITLAB_TOKEN: $${GITLAB_TOKEN:+設定済み}"
	@echo "GITLAB_PROJECT_ID: $${GITLAB_PROJECT_ID:-未設定}"
	@echo "CODEPIPELINE_NAME: $${CODEPIPELINE_NAME:-cicd-comparison-pipeline}"
	@echo "AWS_DEFAULT_REGION: $${AWS_DEFAULT_REGION:-us-east-1}"

# 生成されたレポートファイルを削除
clean:
	@echo "=== 生成されたレポートファイルを削除 ==="
	rm -rf reports/
	@echo "レポートファイルを削除しました"

# 継続的監視（定期実行用）
monitor:
	@echo "=== CI/CDツール継続的監視開始 ==="
	@while true; do \
		echo "$(shell date): メトリクス収集実行中..."; \
		make collect-metrics; \
		echo "$(shell date): 次回実行まで1時間待機..."; \
		sleep 3600; \
	done

# 設定ファイル生成
generate-config:
	@echo "=== CI/CDツール比較設定ファイル生成 ==="
	@mkdir -p config
	@cat > config/cicd-comparison.env << 'EOF'
# CI/CDツール比較用環境変数設定
# このファイルをコピーして実際の値を設定してください

# GitHub設定
GITHUB_TOKEN=your_github_token_here
GITHUB_REPO=owner/repository_name

# GitLab設定
GITLAB_TOKEN=your_gitlab_token_here
GITLAB_PROJECT_ID=your_project_id_here
GITLAB_URL=https://gitlab.com

# AWS設定
AWS_DEFAULT_REGION=us-east-1
CODEPIPELINE_NAME=cicd-comparison-pipeline

# テスト設定
TEST_TIMEOUT=300
PERFORMANCE_THRESHOLD_SECONDS=30
EOF
	@echo "設定ファイルを生成しました: config/cicd-comparison.env"
	@echo "実際の値を設定してから使用してください"

# 依存関係インストール
install-deps:
	@echo "=== CI/CDツール比較用依存関係インストール ==="
	pip install requests boto3 pytest
	@echo "依存関係のインストールが完了しました"

# 使用例表示
examples:
	@echo "=== CI/CDツール比較使用例 ==="
	@echo ""
	@echo "1. 基本的な比較テスト実行:"
	@echo "   make compare-all"
	@echo ""
	@echo "2. 特定ツールのみテスト:"
	@echo "   make test-github"
	@echo "   make test-gitlab"
	@echo "   make test-codepipeline"
	@echo ""
	@echo "3. 特定の失敗条件テスト:"
	@echo "   make test-lint-failures"
	@echo "   make test-sca-failures"
	@echo ""
	@echo "4. メトリクス収集のみ実行:"
	@echo "   GITHUB_REPO=owner/repo make collect-metrics"
	@echo ""
	@echo "5. 継続的監視開始:"
	@echo "   make monitor"
	@echo ""
	@echo "6. 環境変数確認:"
	@echo "   make check-env"