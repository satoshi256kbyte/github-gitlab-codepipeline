#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createResourceName = createResourceName;
require("source-map-support/register");
const cdk = require("aws-cdk-lib");
const network_stack_1 = require("./lib/network-stack");
const iam_stack_1 = require("./lib/iam-stack");
const lambda_stack_1 = require("./lib/lambda-stack");
const ec2_stack_1 = require("./lib/ec2-stack");
const pipeline_stack_1 = require("./lib/pipeline-stack");
const app = new cdk.App();
// 環境設定
const environment = app.node.tryGetContext('environment') || 'local';
const serviceName = 'cicd-comparison';
// 共通のプロパティ
const commonProps = {
    env: {
        account: process.env.CDK_DEFAULT_ACCOUNT,
        region: process.env.CDK_DEFAULT_REGION || 'ap-northeast-1',
    },
    environment,
    serviceName,
};
// リソース命名規約に従った関数
function createResourceName(resourceType, purpose, sequence) {
    const parts = [serviceName, environment, resourceType, purpose];
    if (sequence !== undefined) {
        parts.push(sequence.toString());
    }
    return parts.join('-');
}
// IAMスタック（他のスタックで使用するロールを作成）
const iamStack = new iam_stack_1.IamStack(app, createResourceName('stack', 'iam'), {
    ...commonProps,
    description: 'IAM roles and policies for CI/CD comparison project',
});
// ネットワークスタック
const networkStack = new network_stack_1.NetworkStack(app, createResourceName('stack', 'network'), {
    ...commonProps,
    description: 'Network infrastructure for CI/CD comparison project',
});
// CI/CDツール別Lambdaスタック
const cicdTools = ['github', 'gitlab', 'codepipeline'];
const lambdaStacks = {};
cicdTools.forEach(cicdTool => {
    lambdaStacks[cicdTool] = new lambda_stack_1.LambdaStack(app, `${cicdTool}-${createResourceName('stack', 'lambda')}`, {
        ...commonProps,
        vpc: networkStack.vpc,
        cicdTool: cicdTool,
        description: `Lambda and API Gateway infrastructure for CI/CD comparison project (${cicdTool})`,
    });
});
// CI/CDツール別EC2スタック
const ec2Stacks = {};
const portMapping = { github: 8080, gitlab: 8081, codepipeline: 8082 };
cicdTools.forEach(cicdTool => {
    ec2Stacks[cicdTool] = new ec2_stack_1.Ec2Stack(app, `${cicdTool}-${createResourceName('stack', 'ec2')}`, {
        ...commonProps,
        vpc: networkStack.vpc,
        cicdTool: cicdTool,
        port: portMapping[cicdTool],
        description: `EC2 infrastructure for CI/CD comparison project (${cicdTool})`,
    });
});
// CodePipelineスタック
const pipelineStack = new pipeline_stack_1.PipelineStack(app, createResourceName('stack', 'pipeline'), {
    ...commonProps,
    description: 'CodePipeline infrastructure for CI/CD comparison project',
});
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXBwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQTBCQSxnREFNQztBQS9CRCx1Q0FBcUM7QUFDckMsbUNBQW1DO0FBQ25DLHVEQUFtRDtBQUNuRCwrQ0FBMkM7QUFDM0MscURBQWlEO0FBQ2pELCtDQUEyQztBQUMzQyx5REFBcUQ7QUFFckQsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7QUFFMUIsT0FBTztBQUNQLE1BQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxJQUFJLE9BQU8sQ0FBQztBQUNyRSxNQUFNLFdBQVcsR0FBRyxpQkFBaUIsQ0FBQztBQUV0QyxXQUFXO0FBQ1gsTUFBTSxXQUFXLEdBQUc7SUFDaEIsR0FBRyxFQUFFO1FBQ0QsT0FBTyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQW1CO1FBQ3hDLE1BQU0sRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixJQUFJLGdCQUFnQjtLQUM3RDtJQUNELFdBQVc7SUFDWCxXQUFXO0NBQ2QsQ0FBQztBQUVGLGlCQUFpQjtBQUNqQixTQUFnQixrQkFBa0IsQ0FBQyxZQUFvQixFQUFFLE9BQWUsRUFBRSxRQUFpQjtJQUN2RixNQUFNLEtBQUssR0FBRyxDQUFDLFdBQVcsRUFBRSxXQUFXLEVBQUUsWUFBWSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ2hFLElBQUksUUFBUSxLQUFLLFNBQVMsRUFBRSxDQUFDO1FBQ3pCLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUNELE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUMzQixDQUFDO0FBRUQsNkJBQTZCO0FBQzdCLE1BQU0sUUFBUSxHQUFHLElBQUksb0JBQVEsQ0FBQyxHQUFHLEVBQUUsa0JBQWtCLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxFQUFFO0lBQ25FLEdBQUcsV0FBVztJQUNkLFdBQVcsRUFBRSxxREFBcUQ7Q0FDckUsQ0FBQyxDQUFDO0FBRUgsYUFBYTtBQUNiLE1BQU0sWUFBWSxHQUFHLElBQUksNEJBQVksQ0FBQyxHQUFHLEVBQUUsa0JBQWtCLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxFQUFFO0lBQy9FLEdBQUcsV0FBVztJQUNkLFdBQVcsRUFBRSxxREFBcUQ7Q0FDckUsQ0FBQyxDQUFDO0FBRUgsc0JBQXNCO0FBQ3RCLE1BQU0sU0FBUyxHQUFHLENBQUMsUUFBUSxFQUFFLFFBQVEsRUFBRSxjQUFjLENBQUMsQ0FBQztBQUN2RCxNQUFNLFlBQVksR0FBbUMsRUFBRSxDQUFDO0FBRXhELFNBQVMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUU7SUFDekIsWUFBWSxDQUFDLFFBQVEsQ0FBQyxHQUFHLElBQUksMEJBQVcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxRQUFRLElBQUksa0JBQWtCLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxFQUFFLEVBQUU7UUFDbEcsR0FBRyxXQUFXO1FBQ2QsR0FBRyxFQUFFLFlBQVksQ0FBQyxHQUFHO1FBQ3JCLFFBQVEsRUFBRSxRQUFRO1FBQ2xCLFdBQVcsRUFBRSx1RUFBdUUsUUFBUSxHQUFHO0tBQ2xHLENBQUMsQ0FBQztBQUNQLENBQUMsQ0FBQyxDQUFDO0FBRUgsbUJBQW1CO0FBQ25CLE1BQU0sU0FBUyxHQUFnQyxFQUFFLENBQUM7QUFDbEQsTUFBTSxXQUFXLEdBQUcsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsWUFBWSxFQUFFLElBQUksRUFBRSxDQUFDO0FBRXZFLFNBQVMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUU7SUFDekIsU0FBUyxDQUFDLFFBQVEsQ0FBQyxHQUFHLElBQUksb0JBQVEsQ0FBQyxHQUFHLEVBQUUsR0FBRyxRQUFRLElBQUksa0JBQWtCLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxFQUFFLEVBQUU7UUFDekYsR0FBRyxXQUFXO1FBQ2QsR0FBRyxFQUFFLFlBQVksQ0FBQyxHQUFHO1FBQ3JCLFFBQVEsRUFBRSxRQUFRO1FBQ2xCLElBQUksRUFBRSxXQUFXLENBQUMsUUFBb0MsQ0FBQztRQUN2RCxXQUFXLEVBQUUsb0RBQW9ELFFBQVEsR0FBRztLQUMvRSxDQUFDLENBQUM7QUFDUCxDQUFDLENBQUMsQ0FBQztBQUVILG1CQUFtQjtBQUNuQixNQUFNLGFBQWEsR0FBRyxJQUFJLDhCQUFhLENBQUMsR0FBRyxFQUFFLGtCQUFrQixDQUFDLE9BQU8sRUFBRSxVQUFVLENBQUMsRUFBRTtJQUNsRixHQUFHLFdBQVc7SUFDZCxXQUFXLEVBQUUsMERBQTBEO0NBQzFFLENBQUMsQ0FBQztBQUVILEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIiMhL3Vzci9iaW4vZW52IG5vZGVcbmltcG9ydCAnc291cmNlLW1hcC1zdXBwb3J0L3JlZ2lzdGVyJztcbmltcG9ydCAqIGFzIGNkayBmcm9tICdhd3MtY2RrLWxpYic7XG5pbXBvcnQgeyBOZXR3b3JrU3RhY2sgfSBmcm9tICcuL2xpYi9uZXR3b3JrLXN0YWNrJztcbmltcG9ydCB7IElhbVN0YWNrIH0gZnJvbSAnLi9saWIvaWFtLXN0YWNrJztcbmltcG9ydCB7IExhbWJkYVN0YWNrIH0gZnJvbSAnLi9saWIvbGFtYmRhLXN0YWNrJztcbmltcG9ydCB7IEVjMlN0YWNrIH0gZnJvbSAnLi9saWIvZWMyLXN0YWNrJztcbmltcG9ydCB7IFBpcGVsaW5lU3RhY2sgfSBmcm9tICcuL2xpYi9waXBlbGluZS1zdGFjayc7XG5cbmNvbnN0IGFwcCA9IG5ldyBjZGsuQXBwKCk7XG5cbi8vIOeSsOWig+ioreWumlxuY29uc3QgZW52aXJvbm1lbnQgPSBhcHAubm9kZS50cnlHZXRDb250ZXh0KCdlbnZpcm9ubWVudCcpIHx8ICdsb2NhbCc7XG5jb25zdCBzZXJ2aWNlTmFtZSA9ICdjaWNkLWNvbXBhcmlzb24nO1xuXG4vLyDlhbHpgJrjga7jg5fjg63jg5Hjg4bjgqNcbmNvbnN0IGNvbW1vblByb3BzID0ge1xuICAgIGVudjoge1xuICAgICAgICBhY2NvdW50OiBwcm9jZXNzLmVudi5DREtfREVGQVVMVF9BQ0NPVU5ULFxuICAgICAgICByZWdpb246IHByb2Nlc3MuZW52LkNES19ERUZBVUxUX1JFR0lPTiB8fCAnYXAtbm9ydGhlYXN0LTEnLFxuICAgIH0sXG4gICAgZW52aXJvbm1lbnQsXG4gICAgc2VydmljZU5hbWUsXG59O1xuXG4vLyDjg6rjgr3jg7zjgrnlkb3lkI3opo/ntITjgavlvpPjgaPjgZ/plqLmlbBcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVSZXNvdXJjZU5hbWUocmVzb3VyY2VUeXBlOiBzdHJpbmcsIHB1cnBvc2U6IHN0cmluZywgc2VxdWVuY2U/OiBudW1iZXIpOiBzdHJpbmcge1xuICAgIGNvbnN0IHBhcnRzID0gW3NlcnZpY2VOYW1lLCBlbnZpcm9ubWVudCwgcmVzb3VyY2VUeXBlLCBwdXJwb3NlXTtcbiAgICBpZiAoc2VxdWVuY2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBwYXJ0cy5wdXNoKHNlcXVlbmNlLnRvU3RyaW5nKCkpO1xuICAgIH1cbiAgICByZXR1cm4gcGFydHMuam9pbignLScpO1xufVxuXG4vLyBJQU3jgrnjgr/jg4Pjgq/vvIjku5bjga7jgrnjgr/jg4Pjgq/jgafkvb/nlKjjgZnjgovjg63jg7zjg6vjgpLkvZzmiJDvvIlcbmNvbnN0IGlhbVN0YWNrID0gbmV3IElhbVN0YWNrKGFwcCwgY3JlYXRlUmVzb3VyY2VOYW1lKCdzdGFjaycsICdpYW0nKSwge1xuICAgIC4uLmNvbW1vblByb3BzLFxuICAgIGRlc2NyaXB0aW9uOiAnSUFNIHJvbGVzIGFuZCBwb2xpY2llcyBmb3IgQ0kvQ0QgY29tcGFyaXNvbiBwcm9qZWN0Jyxcbn0pO1xuXG4vLyDjg43jg4Pjg4jjg6/jg7zjgq/jgrnjgr/jg4Pjgq9cbmNvbnN0IG5ldHdvcmtTdGFjayA9IG5ldyBOZXR3b3JrU3RhY2soYXBwLCBjcmVhdGVSZXNvdXJjZU5hbWUoJ3N0YWNrJywgJ25ldHdvcmsnKSwge1xuICAgIC4uLmNvbW1vblByb3BzLFxuICAgIGRlc2NyaXB0aW9uOiAnTmV0d29yayBpbmZyYXN0cnVjdHVyZSBmb3IgQ0kvQ0QgY29tcGFyaXNvbiBwcm9qZWN0Jyxcbn0pO1xuXG4vLyBDSS9DROODhOODvOODq+WIpUxhbWJkYeOCueOCv+ODg+OCr1xuY29uc3QgY2ljZFRvb2xzID0gWydnaXRodWInLCAnZ2l0bGFiJywgJ2NvZGVwaXBlbGluZSddO1xuY29uc3QgbGFtYmRhU3RhY2tzOiB7IFtrZXk6IHN0cmluZ106IExhbWJkYVN0YWNrIH0gPSB7fTtcblxuY2ljZFRvb2xzLmZvckVhY2goY2ljZFRvb2wgPT4ge1xuICAgIGxhbWJkYVN0YWNrc1tjaWNkVG9vbF0gPSBuZXcgTGFtYmRhU3RhY2soYXBwLCBgJHtjaWNkVG9vbH0tJHtjcmVhdGVSZXNvdXJjZU5hbWUoJ3N0YWNrJywgJ2xhbWJkYScpfWAsIHtcbiAgICAgICAgLi4uY29tbW9uUHJvcHMsXG4gICAgICAgIHZwYzogbmV0d29ya1N0YWNrLnZwYyxcbiAgICAgICAgY2ljZFRvb2w6IGNpY2RUb29sLFxuICAgICAgICBkZXNjcmlwdGlvbjogYExhbWJkYSBhbmQgQVBJIEdhdGV3YXkgaW5mcmFzdHJ1Y3R1cmUgZm9yIENJL0NEIGNvbXBhcmlzb24gcHJvamVjdCAoJHtjaWNkVG9vbH0pYCxcbiAgICB9KTtcbn0pO1xuXG4vLyBDSS9DROODhOODvOODq+WIpUVDMuOCueOCv+ODg+OCr1xuY29uc3QgZWMyU3RhY2tzOiB7IFtrZXk6IHN0cmluZ106IEVjMlN0YWNrIH0gPSB7fTtcbmNvbnN0IHBvcnRNYXBwaW5nID0geyBnaXRodWI6IDgwODAsIGdpdGxhYjogODA4MSwgY29kZXBpcGVsaW5lOiA4MDgyIH07XG5cbmNpY2RUb29scy5mb3JFYWNoKGNpY2RUb29sID0+IHtcbiAgICBlYzJTdGFja3NbY2ljZFRvb2xdID0gbmV3IEVjMlN0YWNrKGFwcCwgYCR7Y2ljZFRvb2x9LSR7Y3JlYXRlUmVzb3VyY2VOYW1lKCdzdGFjaycsICdlYzInKX1gLCB7XG4gICAgICAgIC4uLmNvbW1vblByb3BzLFxuICAgICAgICB2cGM6IG5ldHdvcmtTdGFjay52cGMsXG4gICAgICAgIGNpY2RUb29sOiBjaWNkVG9vbCxcbiAgICAgICAgcG9ydDogcG9ydE1hcHBpbmdbY2ljZFRvb2wgYXMga2V5b2YgdHlwZW9mIHBvcnRNYXBwaW5nXSxcbiAgICAgICAgZGVzY3JpcHRpb246IGBFQzIgaW5mcmFzdHJ1Y3R1cmUgZm9yIENJL0NEIGNvbXBhcmlzb24gcHJvamVjdCAoJHtjaWNkVG9vbH0pYCxcbiAgICB9KTtcbn0pO1xuXG4vLyBDb2RlUGlwZWxpbmXjgrnjgr/jg4Pjgq9cbmNvbnN0IHBpcGVsaW5lU3RhY2sgPSBuZXcgUGlwZWxpbmVTdGFjayhhcHAsIGNyZWF0ZVJlc291cmNlTmFtZSgnc3RhY2snLCAncGlwZWxpbmUnKSwge1xuICAgIC4uLmNvbW1vblByb3BzLFxuICAgIGRlc2NyaXB0aW9uOiAnQ29kZVBpcGVsaW5lIGluZnJhc3RydWN0dXJlIGZvciBDSS9DRCBjb21wYXJpc29uIHByb2plY3QnLFxufSk7XG5cbmFwcC5zeW50aCgpOyJdfQ==