#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createResourceName = createResourceName;
require("source-map-support/register");
const cdk = require("aws-cdk-lib");
const network_stack_1 = require("./lib/network-stack");
const iam_stack_1 = require("./lib/iam-stack");
const lambda_stack_1 = require("./lib/lambda-stack");
const ecs_stack_1 = require("./lib/ecs-stack");
const ec2_stack_1 = require("./lib/ec2-stack");
const pipeline_stack_1 = require("./lib/pipeline-stack");
const app = new cdk.App();
// 環境設定
const environment = app.node.tryGetContext('environment') || 'local';
const serviceName = 'cicd-comparison';
// 共通のプロパティ
const commonProps = {
    env: {
        account: process.env.CDK_DEFAULT_ACCOUNT,
        region: process.env.CDK_DEFAULT_REGION || 'ap-northeast-1',
    },
    environment,
    serviceName,
};
// リソース命名規約に従った関数
function createResourceName(resourceType, purpose, sequence) {
    const parts = [serviceName, environment, resourceType, purpose];
    if (sequence !== undefined) {
        parts.push(sequence.toString());
    }
    return parts.join('-');
}
// IAMスタック（他のスタックで使用するロールを作成）
const iamStack = new iam_stack_1.IamStack(app, createResourceName('stack', 'iam'), {
    ...commonProps,
    description: 'IAM roles and policies for CI/CD comparison project',
});
// ネットワークスタック
const networkStack = new network_stack_1.NetworkStack(app, createResourceName('stack', 'network'), {
    ...commonProps,
    description: 'Network infrastructure for CI/CD comparison project',
});
// CI/CDツール別Lambdaスタック
const cicdTools = ['github', 'gitlab', 'codepipeline'];
const lambdaStacks = {};
cicdTools.forEach(cicdTool => {
    lambdaStacks[cicdTool] = new lambda_stack_1.LambdaStack(app, `${cicdTool}-${createResourceName('stack', 'lambda')}`, {
        ...commonProps,
        vpc: networkStack.vpc,
        lambdaExecutionRole: iamStack.lambdaExecutionRole,
        cicdTool: cicdTool,
        description: `Lambda and API Gateway infrastructure for CI/CD comparison project (${cicdTool})`,
    });
});
// CI/CDツール別ECSスタック
const ecsStacks = {};
const portMapping = { github: 8080, gitlab: 8081, codepipeline: 8082 };
cicdTools.forEach(cicdTool => {
    ecsStacks[cicdTool] = new ecs_stack_1.EcsStack(app, `${cicdTool}-${createResourceName('stack', 'ecs')}`, {
        ...commonProps,
        vpc: networkStack.vpc,
        ecsTaskRole: iamStack.ecsTaskRole,
        ecsExecutionRole: iamStack.ecsExecutionRole,
        cicdTool: cicdTool,
        port: portMapping[cicdTool],
        description: `ECS infrastructure for CI/CD comparison project (${cicdTool})`,
    });
});
// CI/CDツール別EC2スタック
const ec2Stacks = {};
cicdTools.forEach(cicdTool => {
    ec2Stacks[cicdTool] = new ec2_stack_1.Ec2Stack(app, `${cicdTool}-${createResourceName('stack', 'ec2')}`, {
        ...commonProps,
        vpc: networkStack.vpc,
        ec2Role: iamStack.ec2Role,
        codeDeployRole: iamStack.codeDeployRole,
        cicdTool: cicdTool,
        port: portMapping[cicdTool],
        description: `EC2 infrastructure for CI/CD comparison project (${cicdTool})`,
    });
});
// CodePipelineスタック（オプション）
if (app.node.tryGetContext('enableCodePipeline') === 'true') {
    const pipelineStack = new pipeline_stack_1.PipelineStack(app, createResourceName('stack', 'pipeline'), {
        ...commonProps,
        codeBuildRole: iamStack.codeBuildRole,
        codePipelineRole: iamStack.codePipelineRole,
        githubOwner: app.node.tryGetContext('githubOwner'),
        githubRepo: app.node.tryGetContext('githubRepo'),
        githubBranch: app.node.tryGetContext('githubBranch') || 'main',
        githubConnectionArn: app.node.tryGetContext('githubConnectionArn'),
        description: 'CodePipeline infrastructure for CI/CD comparison project',
    });
}
// GitHub OIDC接続（オプション）
if (app.node.tryGetContext('enableGitHubOidc') === 'true') {
    // GitHub OIDC Providerとロールを作成
    // 実装は後のタスクで行う
}
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXBwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQTJCQSxnREFNQztBQWhDRCx1Q0FBcUM7QUFDckMsbUNBQW1DO0FBQ25DLHVEQUFtRDtBQUNuRCwrQ0FBMkM7QUFDM0MscURBQWlEO0FBQ2pELCtDQUEyQztBQUMzQywrQ0FBMkM7QUFDM0MseURBQXFEO0FBRXJELE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBRTFCLE9BQU87QUFDUCxNQUFNLFdBQVcsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsSUFBSSxPQUFPLENBQUM7QUFDckUsTUFBTSxXQUFXLEdBQUcsaUJBQWlCLENBQUM7QUFFdEMsV0FBVztBQUNYLE1BQU0sV0FBVyxHQUFHO0lBQ2hCLEdBQUcsRUFBRTtRQUNELE9BQU8sRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFtQjtRQUN4QyxNQUFNLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsSUFBSSxnQkFBZ0I7S0FDN0Q7SUFDRCxXQUFXO0lBQ1gsV0FBVztDQUNkLENBQUM7QUFFRixpQkFBaUI7QUFDakIsU0FBZ0Isa0JBQWtCLENBQUMsWUFBb0IsRUFBRSxPQUFlLEVBQUUsUUFBaUI7SUFDdkYsTUFBTSxLQUFLLEdBQUcsQ0FBQyxXQUFXLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNoRSxJQUFJLFFBQVEsS0FBSyxTQUFTLEVBQUUsQ0FBQztRQUN6QixLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFDRCxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDM0IsQ0FBQztBQUVELDZCQUE2QjtBQUM3QixNQUFNLFFBQVEsR0FBRyxJQUFJLG9CQUFRLENBQUMsR0FBRyxFQUFFLGtCQUFrQixDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsRUFBRTtJQUNuRSxHQUFHLFdBQVc7SUFDZCxXQUFXLEVBQUUscURBQXFEO0NBQ3JFLENBQUMsQ0FBQztBQUVILGFBQWE7QUFDYixNQUFNLFlBQVksR0FBRyxJQUFJLDRCQUFZLENBQUMsR0FBRyxFQUFFLGtCQUFrQixDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsRUFBRTtJQUMvRSxHQUFHLFdBQVc7SUFDZCxXQUFXLEVBQUUscURBQXFEO0NBQ3JFLENBQUMsQ0FBQztBQUVILHNCQUFzQjtBQUN0QixNQUFNLFNBQVMsR0FBRyxDQUFDLFFBQVEsRUFBRSxRQUFRLEVBQUUsY0FBYyxDQUFDLENBQUM7QUFDdkQsTUFBTSxZQUFZLEdBQW1DLEVBQUUsQ0FBQztBQUV4RCxTQUFTLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFO0lBQ3pCLFlBQVksQ0FBQyxRQUFRLENBQUMsR0FBRyxJQUFJLDBCQUFXLENBQUMsR0FBRyxFQUFFLEdBQUcsUUFBUSxJQUFJLGtCQUFrQixDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsRUFBRSxFQUFFO1FBQ2xHLEdBQUcsV0FBVztRQUNkLEdBQUcsRUFBRSxZQUFZLENBQUMsR0FBRztRQUNyQixtQkFBbUIsRUFBRSxRQUFRLENBQUMsbUJBQW1CO1FBQ2pELFFBQVEsRUFBRSxRQUFRO1FBQ2xCLFdBQVcsRUFBRSx1RUFBdUUsUUFBUSxHQUFHO0tBQ2xHLENBQUMsQ0FBQztBQUNQLENBQUMsQ0FBQyxDQUFDO0FBRUgsbUJBQW1CO0FBQ25CLE1BQU0sU0FBUyxHQUFnQyxFQUFFLENBQUM7QUFDbEQsTUFBTSxXQUFXLEdBQUcsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsWUFBWSxFQUFFLElBQUksRUFBRSxDQUFDO0FBRXZFLFNBQVMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUU7SUFDekIsU0FBUyxDQUFDLFFBQVEsQ0FBQyxHQUFHLElBQUksb0JBQVEsQ0FBQyxHQUFHLEVBQUUsR0FBRyxRQUFRLElBQUksa0JBQWtCLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxFQUFFLEVBQUU7UUFDekYsR0FBRyxXQUFXO1FBQ2QsR0FBRyxFQUFFLFlBQVksQ0FBQyxHQUFHO1FBQ3JCLFdBQVcsRUFBRSxRQUFRLENBQUMsV0FBVztRQUNqQyxnQkFBZ0IsRUFBRSxRQUFRLENBQUMsZ0JBQWdCO1FBQzNDLFFBQVEsRUFBRSxRQUFRO1FBQ2xCLElBQUksRUFBRSxXQUFXLENBQUMsUUFBb0MsQ0FBQztRQUN2RCxXQUFXLEVBQUUsb0RBQW9ELFFBQVEsR0FBRztLQUMvRSxDQUFDLENBQUM7QUFDUCxDQUFDLENBQUMsQ0FBQztBQUVILG1CQUFtQjtBQUNuQixNQUFNLFNBQVMsR0FBZ0MsRUFBRSxDQUFDO0FBRWxELFNBQVMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUU7SUFDekIsU0FBUyxDQUFDLFFBQVEsQ0FBQyxHQUFHLElBQUksb0JBQVEsQ0FBQyxHQUFHLEVBQUUsR0FBRyxRQUFRLElBQUksa0JBQWtCLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxFQUFFLEVBQUU7UUFDekYsR0FBRyxXQUFXO1FBQ2QsR0FBRyxFQUFFLFlBQVksQ0FBQyxHQUFHO1FBQ3JCLE9BQU8sRUFBRSxRQUFRLENBQUMsT0FBTztRQUN6QixjQUFjLEVBQUUsUUFBUSxDQUFDLGNBQWM7UUFDdkMsUUFBUSxFQUFFLFFBQVE7UUFDbEIsSUFBSSxFQUFFLFdBQVcsQ0FBQyxRQUFvQyxDQUFDO1FBQ3ZELFdBQVcsRUFBRSxvREFBb0QsUUFBUSxHQUFHO0tBQy9FLENBQUMsQ0FBQztBQUNQLENBQUMsQ0FBQyxDQUFDO0FBRUgsMEJBQTBCO0FBQzFCLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsb0JBQW9CLENBQUMsS0FBSyxNQUFNLEVBQUUsQ0FBQztJQUMxRCxNQUFNLGFBQWEsR0FBRyxJQUFJLDhCQUFhLENBQUMsR0FBRyxFQUFFLGtCQUFrQixDQUFDLE9BQU8sRUFBRSxVQUFVLENBQUMsRUFBRTtRQUNsRixHQUFHLFdBQVc7UUFDZCxhQUFhLEVBQUUsUUFBUSxDQUFDLGFBQWE7UUFDckMsZ0JBQWdCLEVBQUUsUUFBUSxDQUFDLGdCQUFnQjtRQUMzQyxXQUFXLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDO1FBQ2xELFVBQVUsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUM7UUFDaEQsWUFBWSxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLGNBQWMsQ0FBQyxJQUFJLE1BQU07UUFDOUQsbUJBQW1CLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMscUJBQXFCLENBQUM7UUFDbEUsV0FBVyxFQUFFLDBEQUEwRDtLQUMxRSxDQUFDLENBQUM7QUFDUCxDQUFDO0FBRUQsdUJBQXVCO0FBQ3ZCLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsa0JBQWtCLENBQUMsS0FBSyxNQUFNLEVBQUUsQ0FBQztJQUN4RCw4QkFBOEI7SUFDOUIsY0FBYztBQUNsQixDQUFDO0FBRUQsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiIyEvdXNyL2Jpbi9lbnYgbm9kZVxuaW1wb3J0ICdzb3VyY2UtbWFwLXN1cHBvcnQvcmVnaXN0ZXInO1xuaW1wb3J0ICogYXMgY2RrIGZyb20gJ2F3cy1jZGstbGliJztcbmltcG9ydCB7IE5ldHdvcmtTdGFjayB9IGZyb20gJy4vbGliL25ldHdvcmstc3RhY2snO1xuaW1wb3J0IHsgSWFtU3RhY2sgfSBmcm9tICcuL2xpYi9pYW0tc3RhY2snO1xuaW1wb3J0IHsgTGFtYmRhU3RhY2sgfSBmcm9tICcuL2xpYi9sYW1iZGEtc3RhY2snO1xuaW1wb3J0IHsgRWNzU3RhY2sgfSBmcm9tICcuL2xpYi9lY3Mtc3RhY2snO1xuaW1wb3J0IHsgRWMyU3RhY2sgfSBmcm9tICcuL2xpYi9lYzItc3RhY2snO1xuaW1wb3J0IHsgUGlwZWxpbmVTdGFjayB9IGZyb20gJy4vbGliL3BpcGVsaW5lLXN0YWNrJztcblxuY29uc3QgYXBwID0gbmV3IGNkay5BcHAoKTtcblxuLy8g55Kw5aKD6Kit5a6aXG5jb25zdCBlbnZpcm9ubWVudCA9IGFwcC5ub2RlLnRyeUdldENvbnRleHQoJ2Vudmlyb25tZW50JykgfHwgJ2xvY2FsJztcbmNvbnN0IHNlcnZpY2VOYW1lID0gJ2NpY2QtY29tcGFyaXNvbic7XG5cbi8vIOWFsemAmuOBruODl+ODreODkeODhuOCo1xuY29uc3QgY29tbW9uUHJvcHMgPSB7XG4gICAgZW52OiB7XG4gICAgICAgIGFjY291bnQ6IHByb2Nlc3MuZW52LkNES19ERUZBVUxUX0FDQ09VTlQsXG4gICAgICAgIHJlZ2lvbjogcHJvY2Vzcy5lbnYuQ0RLX0RFRkFVTFRfUkVHSU9OIHx8ICdhcC1ub3J0aGVhc3QtMScsXG4gICAgfSxcbiAgICBlbnZpcm9ubWVudCxcbiAgICBzZXJ2aWNlTmFtZSxcbn07XG5cbi8vIOODquOCveODvOOCueWRveWQjeimj+e0hOOBq+W+k+OBo+OBn+mWouaVsFxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVJlc291cmNlTmFtZShyZXNvdXJjZVR5cGU6IHN0cmluZywgcHVycG9zZTogc3RyaW5nLCBzZXF1ZW5jZT86IG51bWJlcik6IHN0cmluZyB7XG4gICAgY29uc3QgcGFydHMgPSBbc2VydmljZU5hbWUsIGVudmlyb25tZW50LCByZXNvdXJjZVR5cGUsIHB1cnBvc2VdO1xuICAgIGlmIChzZXF1ZW5jZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHBhcnRzLnB1c2goc2VxdWVuY2UudG9TdHJpbmcoKSk7XG4gICAgfVxuICAgIHJldHVybiBwYXJ0cy5qb2luKCctJyk7XG59XG5cbi8vIElBTeOCueOCv+ODg+OCr++8iOS7luOBruOCueOCv+ODg+OCr+OBp+S9v+eUqOOBmeOCi+ODreODvOODq+OCkuS9nOaIkO+8iVxuY29uc3QgaWFtU3RhY2sgPSBuZXcgSWFtU3RhY2soYXBwLCBjcmVhdGVSZXNvdXJjZU5hbWUoJ3N0YWNrJywgJ2lhbScpLCB7XG4gICAgLi4uY29tbW9uUHJvcHMsXG4gICAgZGVzY3JpcHRpb246ICdJQU0gcm9sZXMgYW5kIHBvbGljaWVzIGZvciBDSS9DRCBjb21wYXJpc29uIHByb2plY3QnLFxufSk7XG5cbi8vIOODjeODg+ODiOODr+ODvOOCr+OCueOCv+ODg+OCr1xuY29uc3QgbmV0d29ya1N0YWNrID0gbmV3IE5ldHdvcmtTdGFjayhhcHAsIGNyZWF0ZVJlc291cmNlTmFtZSgnc3RhY2snLCAnbmV0d29yaycpLCB7XG4gICAgLi4uY29tbW9uUHJvcHMsXG4gICAgZGVzY3JpcHRpb246ICdOZXR3b3JrIGluZnJhc3RydWN0dXJlIGZvciBDSS9DRCBjb21wYXJpc29uIHByb2plY3QnLFxufSk7XG5cbi8vIENJL0NE44OE44O844Or5YilTGFtYmRh44K544K/44OD44KvXG5jb25zdCBjaWNkVG9vbHMgPSBbJ2dpdGh1YicsICdnaXRsYWInLCAnY29kZXBpcGVsaW5lJ107XG5jb25zdCBsYW1iZGFTdGFja3M6IHsgW2tleTogc3RyaW5nXTogTGFtYmRhU3RhY2sgfSA9IHt9O1xuXG5jaWNkVG9vbHMuZm9yRWFjaChjaWNkVG9vbCA9PiB7XG4gICAgbGFtYmRhU3RhY2tzW2NpY2RUb29sXSA9IG5ldyBMYW1iZGFTdGFjayhhcHAsIGAke2NpY2RUb29sfS0ke2NyZWF0ZVJlc291cmNlTmFtZSgnc3RhY2snLCAnbGFtYmRhJyl9YCwge1xuICAgICAgICAuLi5jb21tb25Qcm9wcyxcbiAgICAgICAgdnBjOiBuZXR3b3JrU3RhY2sudnBjLFxuICAgICAgICBsYW1iZGFFeGVjdXRpb25Sb2xlOiBpYW1TdGFjay5sYW1iZGFFeGVjdXRpb25Sb2xlLFxuICAgICAgICBjaWNkVG9vbDogY2ljZFRvb2wsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgTGFtYmRhIGFuZCBBUEkgR2F0ZXdheSBpbmZyYXN0cnVjdHVyZSBmb3IgQ0kvQ0QgY29tcGFyaXNvbiBwcm9qZWN0ICgke2NpY2RUb29sfSlgLFxuICAgIH0pO1xufSk7XG5cbi8vIENJL0NE44OE44O844Or5YilRUNT44K544K/44OD44KvXG5jb25zdCBlY3NTdGFja3M6IHsgW2tleTogc3RyaW5nXTogRWNzU3RhY2sgfSA9IHt9O1xuY29uc3QgcG9ydE1hcHBpbmcgPSB7IGdpdGh1YjogODA4MCwgZ2l0bGFiOiA4MDgxLCBjb2RlcGlwZWxpbmU6IDgwODIgfTtcblxuY2ljZFRvb2xzLmZvckVhY2goY2ljZFRvb2wgPT4ge1xuICAgIGVjc1N0YWNrc1tjaWNkVG9vbF0gPSBuZXcgRWNzU3RhY2soYXBwLCBgJHtjaWNkVG9vbH0tJHtjcmVhdGVSZXNvdXJjZU5hbWUoJ3N0YWNrJywgJ2VjcycpfWAsIHtcbiAgICAgICAgLi4uY29tbW9uUHJvcHMsXG4gICAgICAgIHZwYzogbmV0d29ya1N0YWNrLnZwYyxcbiAgICAgICAgZWNzVGFza1JvbGU6IGlhbVN0YWNrLmVjc1Rhc2tSb2xlLFxuICAgICAgICBlY3NFeGVjdXRpb25Sb2xlOiBpYW1TdGFjay5lY3NFeGVjdXRpb25Sb2xlLFxuICAgICAgICBjaWNkVG9vbDogY2ljZFRvb2wsXG4gICAgICAgIHBvcnQ6IHBvcnRNYXBwaW5nW2NpY2RUb29sIGFzIGtleW9mIHR5cGVvZiBwb3J0TWFwcGluZ10sXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgRUNTIGluZnJhc3RydWN0dXJlIGZvciBDSS9DRCBjb21wYXJpc29uIHByb2plY3QgKCR7Y2ljZFRvb2x9KWAsXG4gICAgfSk7XG59KTtcblxuLy8gQ0kvQ0Tjg4Tjg7zjg6vliKVFQzLjgrnjgr/jg4Pjgq9cbmNvbnN0IGVjMlN0YWNrczogeyBba2V5OiBzdHJpbmddOiBFYzJTdGFjayB9ID0ge307XG5cbmNpY2RUb29scy5mb3JFYWNoKGNpY2RUb29sID0+IHtcbiAgICBlYzJTdGFja3NbY2ljZFRvb2xdID0gbmV3IEVjMlN0YWNrKGFwcCwgYCR7Y2ljZFRvb2x9LSR7Y3JlYXRlUmVzb3VyY2VOYW1lKCdzdGFjaycsICdlYzInKX1gLCB7XG4gICAgICAgIC4uLmNvbW1vblByb3BzLFxuICAgICAgICB2cGM6IG5ldHdvcmtTdGFjay52cGMsXG4gICAgICAgIGVjMlJvbGU6IGlhbVN0YWNrLmVjMlJvbGUsXG4gICAgICAgIGNvZGVEZXBsb3lSb2xlOiBpYW1TdGFjay5jb2RlRGVwbG95Um9sZSxcbiAgICAgICAgY2ljZFRvb2w6IGNpY2RUb29sLFxuICAgICAgICBwb3J0OiBwb3J0TWFwcGluZ1tjaWNkVG9vbCBhcyBrZXlvZiB0eXBlb2YgcG9ydE1hcHBpbmddLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEVDMiBpbmZyYXN0cnVjdHVyZSBmb3IgQ0kvQ0QgY29tcGFyaXNvbiBwcm9qZWN0ICgke2NpY2RUb29sfSlgLFxuICAgIH0pO1xufSk7XG5cbi8vIENvZGVQaXBlbGluZeOCueOCv+ODg+OCr++8iOOCquODl+OCt+ODp+ODs++8iVxuaWYgKGFwcC5ub2RlLnRyeUdldENvbnRleHQoJ2VuYWJsZUNvZGVQaXBlbGluZScpID09PSAndHJ1ZScpIHtcbiAgICBjb25zdCBwaXBlbGluZVN0YWNrID0gbmV3IFBpcGVsaW5lU3RhY2soYXBwLCBjcmVhdGVSZXNvdXJjZU5hbWUoJ3N0YWNrJywgJ3BpcGVsaW5lJyksIHtcbiAgICAgICAgLi4uY29tbW9uUHJvcHMsXG4gICAgICAgIGNvZGVCdWlsZFJvbGU6IGlhbVN0YWNrLmNvZGVCdWlsZFJvbGUsXG4gICAgICAgIGNvZGVQaXBlbGluZVJvbGU6IGlhbVN0YWNrLmNvZGVQaXBlbGluZVJvbGUsXG4gICAgICAgIGdpdGh1Yk93bmVyOiBhcHAubm9kZS50cnlHZXRDb250ZXh0KCdnaXRodWJPd25lcicpLFxuICAgICAgICBnaXRodWJSZXBvOiBhcHAubm9kZS50cnlHZXRDb250ZXh0KCdnaXRodWJSZXBvJyksXG4gICAgICAgIGdpdGh1YkJyYW5jaDogYXBwLm5vZGUudHJ5R2V0Q29udGV4dCgnZ2l0aHViQnJhbmNoJykgfHwgJ21haW4nLFxuICAgICAgICBnaXRodWJDb25uZWN0aW9uQXJuOiBhcHAubm9kZS50cnlHZXRDb250ZXh0KCdnaXRodWJDb25uZWN0aW9uQXJuJyksXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnQ29kZVBpcGVsaW5lIGluZnJhc3RydWN0dXJlIGZvciBDSS9DRCBjb21wYXJpc29uIHByb2plY3QnLFxuICAgIH0pO1xufVxuXG4vLyBHaXRIdWIgT0lEQ+aOpee2mu+8iOOCquODl+OCt+ODp+ODs++8iVxuaWYgKGFwcC5ub2RlLnRyeUdldENvbnRleHQoJ2VuYWJsZUdpdEh1Yk9pZGMnKSA9PT0gJ3RydWUnKSB7XG4gICAgLy8gR2l0SHViIE9JREMgUHJvdmlkZXLjgajjg63jg7zjg6vjgpLkvZzmiJBcbiAgICAvLyDlrp/oo4Xjga/lvozjga7jgr/jgrnjgq/jgafooYzjgYZcbn1cblxuYXBwLnN5bnRoKCk7Il19